// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lallison/h_skills_project/internal/service/gateways/status (interfaces: StatusUseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	slog "log/slog"
	reflect "reflect"

	entities "github.com/lallison/h_skills_project/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockStatusUseCase is a mock of StatusUseCase interface.
type MockStatusUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockStatusUseCaseMockRecorder
}

// MockStatusUseCaseMockRecorder is the mock recorder for MockStatusUseCase.
type MockStatusUseCaseMockRecorder struct {
	mock *MockStatusUseCase
}

// NewMockStatusUseCase creates a new mock instance.
func NewMockStatusUseCase(ctrl *gomock.Controller) *MockStatusUseCase {
	mock := &MockStatusUseCase{ctrl: ctrl}
	mock.recorder = &MockStatusUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusUseCase) EXPECT() *MockStatusUseCaseMockRecorder {
	return m.recorder
}

// Status mocks base method.
func (m *MockStatusUseCase) Status(arg0 *slog.Logger) (*entities.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0)
	ret0, _ := ret[0].(*entities.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockStatusUseCaseMockRecorder) Status(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockStatusUseCase)(nil).Status), arg0)
}
