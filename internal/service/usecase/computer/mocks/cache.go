// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lallison/h_skills_project/internal/service/usecase/computer (interfaces: Cache)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entities "github.com/lallison/h_skills_project/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Computers mocks base method.
func (m *MockCache) Computers() ([]*entities.Computer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Computers")
	ret0, _ := ret[0].([]*entities.Computer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Computers indicates an expected call of Computers.
func (mr *MockCacheMockRecorder) Computers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Computers", reflect.TypeOf((*MockCache)(nil).Computers))
}
